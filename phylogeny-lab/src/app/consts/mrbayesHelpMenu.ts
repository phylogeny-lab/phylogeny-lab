export const lsetHelpMenu = {
    applyto: {
        description: "This option allows you to apply the lset commands to specific partitions. This command should be the first in the list of commands specified in lset. Moreover, it only makes sense to be using this command if the data have been partitioned. A default partition is set on execution of a matrix. If the data are homogeneous (i.e., all of the same data type), then this partition will not subdivide the characters. Up to 30 other partitions can be defined, and you can switch among them using 'set partition=<partition name>'. Now, you may want to specify different models to different partitions of the data. Applyto allows you to do this. For example, say you have partitioned the data by codon position, and you want to apply a nst=2 model to the first two partitions and nst=6 to the last. This could be implemented in two uses of lset: \n\n\tlset applyto=(1,2) nst=2 \n\n\tlset applyto=(3) nst=6 \n\nThe first applies the parameters after 'applyto' to the first and second partitions. The second lset applies nst=6 to the third partition. You can also use applyto=(all), which attempts to apply the parameter settings to all of the data partitions. Importantly, if the option is not consistent with the data in the partition, the program will not apply the lset option to that partition."
    },
    nucmodel: {
        description: "This specifies the general form of the nucleotide substitution model. The options are '4by4' [the standard model of DNA substitution in which there are only four states (A,C,G,T/U)], 'doublet' (a model appropriate for modelling the stem regions of ribosomal genes where the state space is the 16 doublets of nucleotides), 'codon' (the substitution model is expanded around triplets of nucleotides - a codon), and 'Protein' (triplets of nucleotides are translated to amino acids, which form the basis of the substitution model)."
    },
    nst: {
        description: "Sets the number of substitution types: '1' constrains all of the rates to be the same (e.g., a JC69 or F81 model); '2' allows transitions and transversions to have potentially different rates (e.g., a K80 or HKY85 model); '6' allows all rates to be different, subject to the constraint of time-reversibility (e.g., a GTR model). Finally, 'nst' can be set to 'mixed', which results in the Markov chain sampling over the space of all possible reversible substitution models, including the GTR model and all models that can be derived from it model by grouping the six rates in various combinations. This includes all the named models above and a large number of others, with or without name."
    },
    code: {
        description: "Enforces the use of a particular genetic code. The default is the universal code. Other options include 'vertmt' for vertebrate mitochondrial, 'invermt', 'mycoplasma', 'yeast', 'ciliate', 'echinoderm', 'euplotid', and 'metmt' (for metazoan mitochondrial except vertebrates)."
    },
    ploidy: {
        description: "Specifies the ploidy of the organism. Options are 'Haploid', 'Diploid' or 'Zlinked'. This option is used when a coalescent prior is used on trees."
    },
    rates: {
        description: "Sets the model for among-site rate variation. In general, the rate at a site is considered to be an unknown random variable. The valid options are:  \n\n* equal    -- No rate variation across sites. \n* gamma   -- Gamma-distributed rates across sites. The rate at a site is drawn from a gamma distribution. The gamma distribution has a single parameter that describes how much rates vary. \n* lnorm  -- Lognormal-distributed rates across sites. The rate at a site is drawn from a lognormal distribution, which has a single parameter, sigma (SD in log scale) that describes how much rates vary (mean in natural scale fixed to 1.0). \n* adgamma  -- Autocorrelated rates across sites. The marginal rate distribution is gamma, but adjacent sites have correlated rates. \n* propinv    -- A proportion of the sites are invariable. \n* invgamma   -- A proportion of the sites are invariable while the rate for the remaining sites are drawn from a gamma distribution. \n* kmixture -- Site rates come from a mixture with k categories. \n\nCategory rates are drawn from an ordered flat Dirichlet distribution with mean rather than sum equal to 1.0. Note that MrBayes versions 2.0 and earlier supported options that allowed site specific rates (e.g., ssgamma). In versions 3.0 and later, site specific rates are allowed, but set using the 'prset ratepr' command for each partition."
    },
    ngammacat: {
        description: "Sets the number of rate categories for the gamma distribution. The gamma distribution is continuous. However, it is virtually impossible to calculate likelihoods under the continuous gamma distribution. Hence, an approximation to the continuous gamma is used; the gamma distribution is broken into ncat categories of equal weight (1/ncat). The mean rate for each category represents the rate for the entire category. This option allows you to specify how many rate categories to use when approximating the gamma. The approximation is better as ncat is increased. In practice, 'ncat=4' does a reasonable job of approximating the continuous gamma."
    },
    nlnormcat: {
        description: "Used to set the number of discrete categories used for the approximation of the lognormal distribution, in the same way as the Ngammacat setting for the discrete gamma approximation. Default value is 4."
    },
    nmixtcat: {
        description: "Used to set the number of components in the k-mixture model of rate variation across sites. Default value is 4."
    },
    nbetacat: {
        description: "Sets the number of rate categories for the beta distribution. A symmetric beta distribution is used to model the stationary frequencies when morphological data are used. This option specifies how well the beta distribution will be approximated."
    },
    omegavar: {
        description: "Allows the nonsynonymous/synonymous rate ratio (omega) to vary across codons. Ny98 assumes that there are three classes, with potentially different omega values (omega1, omega2, omega3): omega2 = 1; 0 < omega1 < 1; and omega3 > 1. Like the Ny98 model, the M3 model has three omega classes. However, their values are less constrained, with omega1 < omega2 < omega3. The default (omegavar = equal) has no variation on omega across sites."
    },
    covarion: {
        description: "This forces the use of a covarion-like model of substitution for nucleotide or amino acid data. The valid options are 'yes' and 'no'. The covarion model allows the rate at a site to change over its evolutionary history. Specifically, the site is either on or off. When it is off, no substitutions are possible. When the process is on, substitutions occur according to a specified substitution model (specified using the other lset options)."
    },
    coding: {
        description: "This specifies how characters were sampled. If all site patterns had the possibility of being sampled, then 'All' should be specified (the default). Otherwise 'Variable' (only variable characters had the possibility of being sampled), 'Informative' (only parsimony informative characters has the possibility of being sampled), 'Nosingletons' (characters which are constant in all but one taxon were not sampled), 'Noabsencesites' (characters for which all taxa were coded as absent were not sampled), 'Nopresencesites' (characters for which all taxa were coded as present were not sampled). 'All' works for all data types. However, the others only work for morphological (All/Variable/Informative/Nosingletons) or restriction site (All/Variable/Informative/Nosingletons/Noabsencesites/Nopresencesites/Nosingletonpresence/Nosingletonabsence) data."
    },
    statefrmod: {
        description: "This option allows you to specify whether a 'stationary' (= steady state) or a 'directional' model of evolution should be used (the option 'mixed' invokes a reversible jump over both alternatives). In the stationary (which is the standard) case, the state frequencies are assumed to be at equilibrium throughout the tree. If a directional model is chosen, then the state frequencies at the root are allowed to differ from the equilibrium frequencies. The directional and mixed models are currently only implemented for restriction data. Note that directional evolution means that the rooting of the tree matters. Thus, although the tree is not a clock tree, it will have a root under a directional model. When 'mixed' is chosen, the chain samples the stationary state frequency model, with statefrmod=0 indicating the stationary model and statefrmod=1 indicating the directional model."
    },
    parsmodel: {
        description: "This forces calculation under the so-called parsimony model described by Tuffley and Steel (1998). The options are 'yes' or 'no'. Note that the biological assumptions of this model are anything but parsimonious. In fact, this model assumes many more parameters than the next most complicated model implemented in this program. If you really believe that the parsimony model makes the biological assumptions described by Tuffley and Steel, then the parsimony method is misnamed."
    }
}

export const prsetHelpMenu = {
    applyto: {
        description: "This option allows you to apply the prset commands to specific partitions. This command should be the first in the list of commands specified in prset. Moreover, it only makes sense to be using this command if the data have been partitioned. A default partition is set on execution of a matrix. If the data are homogeneous (i.e., all of the same data type), then this partition will not subdivide the characters. Up to 30 other partitions can be defined, and you can switch among them using 'set partition=<partition name>'. Now, you may want to specify different priors to different partitions of the data. Applyto allows you to do this. For example, say you have partitioned the data by codon position, and you want to fix the statefreqs to equal for the first two partitions but apply a flat Dirichlet prior to the statefreqs of the last. This could be implemented in two uses of prset: \n\n\tprset applyto=(1,2) statefreqs=fixed(equal) \n\n\tprset applyto=(3) statefreqs=dirichlet(1,1,1,1) \n\nThe first applies the parameters after 'applyto' to the first and second partitions. The second prset applies a flat Dirichlet to the third partition. You can also use applyto=(all), which attempts to apply the parameter settings to all of the data partitions. Importantly, if the option is not consistent with the data in the partition, the program will not apply the prset option to that partition."
    },
    tratiopr: {
        description: "This parameter sets the prior for the transition/transversion rate ratio (tratio). The options are: \n\n\tprset tratiopr = beta(<number>, <number>) \n\n\tprset tratiopr = fixed(<number>) \n\nThe program assumes that the transition and transversion rates are independent gamma-distributed random variables with the same scale parameter when beta is selected. If you want a diffuse prior that puts equal emphasis on transition/transversion rate ratios above 1.0 and below 1.0, then use a flat Beta, beta(1,1), which is the default. If you wish to concentrate this distribution more in the equal-rates region, then use a prior of the type beta(x,x), where the magnitude of x determines how much the prior is concentrated in the equal rates region. For instance, a beta(20,20) puts more probability on rate ratios close to 1.0 than a beta(1,1). If you think it is likely that the transition/transversion rate ratio is 2.0, you can use a prior of the type beta(2x,x), where x determines how strongly the prior is concentrated on tratio values near 2.0. For instance, a beta(2,1) is much more diffuse than a beta(80,40) but both have the expected tratio 2.0 in the absence of data. The parameters of the Beta can be interpreted as counts: if you have observed x transitions and y transversions, then a beta(x+1,y+1) is a good representation of this information. The fixed option allows you to fix the tratio to a particular value."
    },
    revmatpr: {
        description: "This parameter sets the prior for the substitution rates of the GTR model for nucleotide data. The options are: \n\n\tprset revmatpr = dirichlet(<number>,<number>,...,<number>) \n\n\tprset revmatpr = fixed(<number>,<number>,...,<number>) \n\nThe program assumes that the six substitution rates are independent gamma-distributed random variables with the same scale parameter when dirichlet is selected. The six numbers in brackets each corresponds to a particular substitution type. Together, they determine the shape of the prior. The six rates are in the order A<->C, A<->G, A<->T, C<->G, C<->T, and G<->T. If you want an uninformative prior you can use dirichlet(1,1,1,1,1,1), also referred to as a 'flat' Dirichlet. This is the default setting. If you wish a prior where the C<->T rate is 5 times and the A<->G rate 2 times higher, on average, than the transversion rates, which are all the same, then you should use a prior of the form dirichlet(x,2x,x,x,5x,x), where x determines how much the prior is focused on these particular rates. For more info, see tratiopr. The fixed option allows you to fix the substitution rates to particular values."
    },
    revratepr: {
        description: "This parameter sets the prior for each substitution rate of the GTR model subspace when 'nst' is set to 'mixed' (see the 'lset' command). The only option is \n\n\tprset revratepr = symdir(<number>) \n\nwhich will associate each independent rate in the rate matrix with a modified symmetric Dirichlet prior, where a singleton rate has the specified alpha parameter, while a rate that applies to n pairwise substitution types has an alpha that is n times the specified number. The higher the specified number, the more focused the prior will be on equal rates. The default value is 1, which gives an effect similar to a flat Dirichlet."
    },
    aamodelpr: {
        description: "This parameter sets the rate matrix for amino acid data. You can either fix the model by specifying aamodelpr=fixed(<model name>), where <model name> is 'poisson' (a glorified Jukes-Cantor model), 'jones', 'dayhoff', 'mtrev', 'mtmam', 'wag', 'rtrev', 'cprev', 'vt', 'blosum', 'lg', 'equalin' (a glorified Felsenstein 1981 model), or 'gtr'. You can also average over the first ten models by specifying aamodelpr=mixed. If you do so, the Markov chain will sample each model according to its probability. The sampled model is reported as an index: poisson(0), jones(1), dayhoff(2), mtrev(3), mtmam(4), wag(5), rtrev(6), cprev(7), vt(8), or blosum(9). The 'Sump' command summarizes the MCMC samples and calculates the posterior probability estimate for each of these models."
    },
    aarevmatpr: {
        description: "This parameter sets the prior for the substitution rates of the GTR model for amino acid data. The options are: \n\n\tprset aarevmatpr = dirichlet(<number>,<number>,...,<number>) \n\n\tprset aarevmatpr = fixed(<number>,<number>,...,<number>) \n\nThe options are the same as those for 'Revmatpr' except that they are defined over the 190 rates of the time-reversible GTR model for amino acids instead of over the 6 rates of the GTR model for nucleotides. The rates are in the order A<->R, A<->N, etc to Y<->V. In other words, amino acids are listed in alphabetic order based on their full name. The first amino acid (Alanine) is then combined in turn with all amino acids following it in the list, starting with amino acid 2 (Arginine) and finishing with amino acid 20 (Valine). The second amino acid (Arginine) is then combined in turn with all amino acids following it, starting with amino acid 3 (Asparagine) and finishing with amino acid 20 (Valine), and so on."
    },
    omegapr: {
        description: "This parameter specifies the prior on the nonsynonymous/synonymous rate ratio. The options are: \n\n\tprset omegapr = dirichlet(<number>,<number>) \n\n\tprset omegapr = fixed(<number>) \n\nThis parameter is only in effect if the nucleotide substitution model is set to codon using the lset command (lset nucmodel=codon). Moreover, it only applies to the case when there is no variation in omega across sites (i.e., 'lset omegavar=equal')."
    },
    ny98omega1pr: {
        description: "This parameter specifies the prior on the nonsynonymous/synonymous rate ratio for sites under purifying selection. The options are: \n\n\tprset Ny98omega1pr = beta(<number>,<number>) \n\n\tprset Ny98omega1pr = fixed(<number>) \n\nThis parameter is only in effect if the nucleotide substitution model is set to codon using the lset command (lset nucmodel=codon). Moreover, it only applies to the case where omega varies across sites using the model of Nielsen and Yang (1998) (i.e., 'lset omegavar=ny98'). If fixing the parameter, you must specify a number between 0 and 1."
    },
    ny98omega3pr: {
        description: "This parameter specifies the prior on the nonsynonymous/synonymous rate ratio for positively selected sites. The options are: \n\n\tprset Ny98omega3pr = uniform(<number>,<number>) \n\tprset Ny98omega3pr = exponential(<number>) \n\tprset Ny98omega3pr = fixed(<number>) \n\nThis parameter is only in effect if the nucleotide substitution model is set to codon using the lset command (lset nucmodel=codon). Moreover, it only applies to the case where omega varies across sites according to the NY98 model. Note that if the NY98 model is specified that this parameter must be greater than 1, so you should not specify a uniform(0,10) prior, for example."
    },
    m3omegapr: {
        description: "This parameter specifies the prior on the nonsynonymous/synonymous rate ratios for all three classes of sites for the M3 model. The options are: \n\n\tprset M3omegapr = exponential \n\tprset M3omegapr = fixed(<number>,<number>,<number>) \n\nThis parameter is only in effect if the nucleotide substitution model is set to codon using the lset command (lset nucmodel=codon). Moreover, it only applies to the case where omega varies across sites using the M3 model of Yang et al. (2000) (i.e., 'lset omegavar=M3'). Under the exponential prior, the four rates (dN1, dN2, dN3, and dS) are all considered to be independent draws from the same exponential distribution (the parameter of the exponential does not matter, and so you don't need to specify it). The rates dN1, dN2, and dN3 are taken to be the order statistics with dN1 < dN2 < dN3. These three rates are all scaled to the same synonymous rate, dS. The other option is to simply fix the three rate ratios to some values."
    },
    codoncatfreqs: {
        description: "This parameter specifies the prior on frequencies of sites under purifying, neutral, and positive selection. The options are: \n\n\tprset codoncatfreqs = dirichlet(<num>,<num>,<num>) \n\tprset codoncatfreqs = fixed(<number>,<number>,<number>) \n\nThis parameter is only in effect if the nucleotide substitution model is set to codon using the lset command (lset nucmodel=codon). Moreover, it only applies to the case where omega varies across sites using the models of Nielsen and Yang (1998) (i.e., 'lset omegavar=ny98') or Yang et al. (2000) (i.e., 'lset omegavar=M3') Note that the sum of the three frequencies must be 1."
    },
    statefreqpr: {
        description: "This parameter specifies the prior on the state frequencies. The options are: \n\n\tprset statefreqpr = dirichlet(<number>) \n\tprset statefreqpr = dirichlet(<number>,...,<number>) \n\tprset statefreqpr = fixed(equal) \n\tprset statefreqpr = fixed(empirical) \n\tprset statefreqpr = fixed(<number>,...,<number>) \n\nFor the dirichlet, you can specify either a single number or as many numbers as there are states. If you specify a single number, then the prior has all states equally probable with a variance related to the single parameter passed in."
    },
    rootfreqpr: {
        description: "This prior is only available when the 'Directional' model was chosen as the Statefrmod in 'lset'. It specifies the prior on the state freuencies at the root, in contrast to the equilibrium state frequencies. The options are: \n\n\tprset rootfreqpr = dirichlet(<number>) \n\tprset rootfreqpr = dirichlet(<number>,...,<number>) \n\tprset rootfreqpr = fixed(<number>,...,<number>) \n\nFor the Dirichlet, you can specify either a single number or as many numbers as there are states. If you specify a single number, then the prior has all states equally probable with a variance related to the single parameter passed in."
    },
    shapepr: {
        description: "This parameter specifies the prior for the gamma/lnorm shape parameter for among-site rate variation. The options are: \n\n\tprset shapepr = uniform(<number>,<number>) \n\tprset shapepr = exponential(<number>) \n\tprset shapepr = fixed(<number>)"
    },
    pinvarpr: {
        description: "This parameter specifies the prior for the proportion of invariable sites. The options are: \n\n\tprset pinvarpr = uniform(<number>,<number>) \n\tprset pinvarpr = fixed(<number>) \n\nNote that the valid range for the parameter is between 0 and 1. Hence, 'prset pinvarpr=uniform(0,0.8)' is valid while 'prset pinvarpr=uniform(0,10)' is not. The default setting is 'prset pinvarpr=uniform(0,1)'."
    },
    ratecorrpr: {
        description: "This parameter specifies the prior for the autocorrelation parameter of the autocorrelated gamma distribution for among-site rate variation. The options are: \n\n\tprset ratecorrpr = uniform(<number>,<number>) \n\tprset ratecorrpr = fixed(<number>) Note that the valid range for the parameter is between -1 and 1. Hence, 'prset ratecorrpr=uniform(-1,1)' is valid while 'prset ratecorrpr=uniform(-11,10)' is not. The default setting is 'prset ratecorrpr=uniform(-1,1)'."
    },
    covswitchpr: {
        description: "This option sets the prior for the covarion switching rates. The options are: \n\n\tprset covswitchpr = uniform(<number>,<number>) \n\tprset covswitchpr = exponential(<number>) \n\tprset covswitchpr = fixed(<number>,<number>) \n\nThe covarion model has two rates: a rate from on to off and a rate from off to on. The rates are assumed to have independent priors that individually are either uniformly or exponentially distributed. The other option is to fix the switching rates, in which case you must specify both rates. (The first number is off->on and the second is on->off)."
    },
    symdirihyperpr: {
        description: "This option sets the prior for the stationary frequencies of the states for morphological (standard) data. The labelling of the states is somewhat arbitrary. For example, the state '1' for different characters does not have the same meaning. This is not true for DNA characters, for example, where a 'G' has the same meaning across characters. The fact that the labelling of morphological characters is arbitrary makes it difficult to allow unequal characterstate frequencies. MrBayes gets around this problem by assuming that the states have a symmetric Dirichlet prior (i.e. all Dirichlet parameters are equal). The variation in the Dirichlet can be controlled by this parameter. Symdirihyperpr specifies the distribution on the parameter of the symmetric Dirichlet. The valid options are: \n\n\tprset Symdirihyperpr = uniform(<number>,<number>) \n\tprset Symdirihyperpr = exponential(<number>) \n\tprset Symdirihyperpr = fixed(<number>) \n\tprset Symdirihyperpr = fixed(infinity) \n\nIf 'fixed(infinity)' is chosen, the Dirichlet prior is fixed such that all character states have equal frequency."
    },
    topologypr: {
        description: "This parameter specifies the prior probabilities of phylogenies. The options are: \n\n\tprset topologypr = uniform \n\tprset topologypr = speciestree \n\tprset topologypr = constraints(<list>) \n\tprset topologypr = fixed(<treename>) \n\nIf the prior is selected to be 'uniform', the default, then all possible trees are considered a priori equally probable. The 'speciestree' option is used when the topology is constrained to fold inside a species tree together with other (gene) trees. The constraints option allows you to specify complicated prior probabilities on trees (constraints are discussed more fully in 'help constraint'). Note that you must specify a list of constraints that you wish to be obeyed. The list can be either the constraints' name or number. Finally, you can fix the topology to that of a user tree defined in a trees block. Branch lengths will still be sampled as usual on the fixed topology."
    },
    brlenspr: {
        description: "This parameter specifies the prior probability distribution on branch lengths. The options are specified using: \n\n\tprset brlenspr = <setting> \n\nwhere <setting> is one of \n\n\tunconstrained:uniform(<num>,<num>) \n\tunconstrained:exponential(<number>) \n\tunconstrained:twoexp(<num>,<num>) \n\tunconstrained:gammadir(<num>,<num>,<num>,<num>) \n\tunconstrained:invgamdir(<num>,<num>,<num>,<num>) \n\tclock:uniform \n\tclock:birthdeath \n\tclock:coalescence \n\tclock:fossilization \n\tclock:speciestree \n\tfixed(<treename>) \n\nTrees with unconstrained branch lengths are unrooted whereas clock-constrained trees are rooted. The option after the colon specifies the details of the probability density of branch lengths. If you choose a birth-death or coalescence prior, you may want to modify the details of the parameters of those processes (speciation rate, extinction rate and sample probability for the birth-death prior; population size and clock rate parameter for the coalescence prior). When gene trees are constrained to fold inside species trees, the appropriate branch length prior is 'clock:speciestree'. Under this model, it is possible to control whether the population size is constant or variable across the species tree using the 'popvarpr' setting. Branch lengths can also be fixed but only if the topology is fixed. \n\nFor unconstrained branch lengths, MrBayes offers five alternative prior distributions. The first two are the simple 'uniform' and 'exponential' priors. The 'uniform' prior takes two parameters, the lower and upper bound of the uniform distribution, respectively. The 'exponential' prior takes a single parameter, the rate of the exponential distribution. The mean of the exponential distribution is the inverse of the rate. For instance, an 'exp(10)' distribution has an expected mean of 0.1. \nMrBayes also offers three more complex prior distributions on unconstrained branch lengths. The two-exponential prior (Yang and Rannala 2005; Yang 2007) uses two different exponential distributions, one for internal and one for external branch lengths. The two-exponential prior is invoked using 'twoexp(<r_I>,<r_E>)', where '<r_I>' is a number specifying the rate of the exponential distribution on internal branch lengths, while '<r_E>' is the rate for external branch lengths. The prior mean for internal branch lengths is then 1/r_I, and for external ones is 1/r_E. For instance, to set prior mean of internal branch lengths to 0.01, and external ones to 0.1, use 'twoexp(100,10)'. \nThe setting 'twoexp(10,10)' is equivalent to 'exp(10)'. The compound Dirichlet priors 'gammadir(<a_T>,<b_T>,<a>,<c>)' and 'invgamdir(<a_T>,<b_T>,<a>,<c>)' specify a fairly diffuse prior on tree length 'T', and then partition the tree length into branch lengths according to a Dirichlet distribution (Rannala et al. 2012). If 'T' is considered drawn from a gamma distribution with parameters a_T and b_T, and with mean a_T/b_T, we recommend setting a_T = 1; if it is instead considered drawn from an inverse gamma (invgamma) distribution with parameters a_T and b_T, and with mean b_T/(a_T -1), then we recommend setting a_T = 3. In the latter case, b_T should be chosen so that the prior mean of T is reasonable for the data. In the former case, setting b_T = 0.1 (corresponding to a mean tree length of 10) should be appropriate for a wide range of tree lengths (at least in the interval 1 to 100). The concentration parameter a of the Dirichlet distribution is inversely related to the variance of the branch lengths, while c is the ratio of the prior means for the internal and external branch lengths. The default setting, a = c = 1, specifies a uniform Dirichlet distribution of branch lengths given the tree length. For instance, 'gammadir(1,0.1,1,1)' specifies a compound Dirichlet prior on branch lengths, where tree length is associated with a gamma distribution with mean 10, and branch length proportions are associated with a uniform Dirichlet distribution (default). For clock trees with calibrated external nodes (fossils), MrBayes also offers the fossilized birth-death prior: 'clock:fossilization'. If 'SampleStrat' is set to 'fossiltip', it assumes that upon sampling the lineage is dead and won't produce descendants, meaning each fossil sample is a tip. If 'SampleStrat' is set to 'random' (default), fossils are sampled serially along the birth-death tree (Stadler 2010), so they can be tips or ancestors. See 'Speciationpr', 'Extinctionpr', 'SampleStrat', 'Fossilizationpr' for more information."
    },
    treeagepr: {
        description: "This parameter specifies the prior probability distribution on the tree age when a uniform or fossilization prior is used on the branch lengths of a clock tree. \n\nThe options are: \n\n\tprset treeagepr = <setting> \n\nwhere <setting> is one of \n\n\tfixed(<age>)\n\tuniform(<min_age>,<max_age>)\n\toffsetexponential(<min_age>,<mean_age>)\n\ttruncatednormal(<min_age>,<mean_age>,<st.dev.>)\n\tlognormal(<mean_age>,<st.dev.>)\n\toffsetlognormal(<min_age>,<mean_age>,<st.dev.>)\n\tgamma(<mean_age>,<st.dev.>)\n\toffsetgamma(<min_age>,<mean_age>,<st.dev.>)\n\nThese are the same options used for the 'Calibrate' command. Note that, unlike elsewhere in MrMayes, we always use the mean and standard deviation of the resulting age distribution rather than the standard parameterization, if different. This is to facilitate for the users who want to focus on the information conveyed about the age. For those who wish to use the standard parameterization, there are simple conversions between the two. See the 'Calibrate' command for more information. \n\nThe tree age is simply the age of the most recent common ancestor of the tree. If the clock rate is fixed to 1.0, which is the default, the tree age is equivalent to the expected number of substitutions from the root to the tip of the tree, that is, tree height. \n\nThe tree age prior ensures that the joint probability for the uniform prior (or fossilization prior) model of branch lengths on a clock tree is proper. The default setting is 'gamma(1,1)'. If the root node in the tree is calibrated, the root calibration replaces the tree age prior."
    },
    speciationpr: {
        description: "This parameter sets the prior on the net diversification rate i.e., (lambda - mu) in the birth-death model and the general case of fossilized birth-death (FBD) model; or (lambda - mu - psi) in the special case of the FBD model (fossiltip). Values of this parameter are > 0. Prior options: \n\n\tprset speciationpr = uniform(<number>,<number>)\n\tprset speciationpr = exponential(<number>)\n\tprset speciationpr = fixed(<number>)\n\nThis parameter is only relevant if the (fossil) birth-death process is selected as the prior on branch lengths."
    },
    extinctionpr: {
        description: "This parameter sets the prior on the relative extinction rate (turnover), i.e., (mu / lambda) in the birth-death model and the general case of the FBD model; or (mu + psi) / lambda in the special case of the FBD model (fossiltip). Values of this parameter are in range (0,1). Prior options: \n\n\tprset extinctionpr = beta(<number>,<number>)\n\tprset extinctionpr = fixed(<number>)\n\nThis parameter is only relevant if the (fossil) birth-death process is selected as the prior on branch lengths."
    },
    fossilizationpr: {
        description: "This parameter sets the prior on the relative fossilization rate, psi/(mu+psi), in the fossilized birth-death model. Values of this parameter are in range (0,1). Prior options: \n\n\tprset fossilizationpr = beta(<number>,<number>)\n\tprset fossilizationpr = fixed(<number>)\n\nThis parameter is only relevant if the fossilized birth-death process is selected as the prior on branch lengths. If SampleStrat is used to divide up time intervals, it sets the i.i.d. prior for the parameter in each interval."
    },
    sampleprob: {
        description: "This parameter sets the fraction of extant taxa that are sampled in the analysis. This is used with the birth-death prior (Yang & Rannala 1997; Stadler 2009; Hohna et al. 2011), or the fossilized birth-death prior (Stadler 2010; Heath et al. 2014; Zhang et al. 2016) on rooted timetrees. Values are in range (0,1], with 1.0 for complete sampling. \n\n\tprset sampleprob = <number>"
    },
    sampleStrat: {
        description: "This parameter sets the strategy under which species were sampled in the analysis. For the birth-death prior, 'birth-death' (Hohna et al. 2011), three strategies: 'random', 'diversity' and 'cluster' sampling can be used for extant taxa. No extinct sample (fossil) is allowed in this prior. \n\nFor data with extant and extinct samples, use 'prset brlenspr=clock:fossilization'. (Stadler 2010; Zhang et al. 2016) For the fossilized birth-death prior, 'fossiltip' assumes extant taxa are sampled randomly, extinct taxa (fossils) are sampled with constant rate, and upon sampling the lineage is dead and won't produce any descendant, so fossils are all at the tips. Except 'fossiltip', the following strategies allow fossils also being ancestors of other samples: 'random' (default) assumes extant taxa are sampled uniformly at random with probability rho; 'diversity' assumes extant taxa are sampled with proportion rho to maximize diversity (Zhang et al. 2016). Value of rho is set in Sampleprob (see above). \n\nBy default, the rates of speciation, extinction, and fossil sampling are constant in the FBD model (Stadler 2010). To allow rate variation through time (in a piecewise-constant manner), append the number <s>: of shifts and corresponding times <t_i> (in descending order) to the sampling strategy ('random' or  'diversity'), in the order for relative fossil sampling, net diversification and turnover rates. For example '4: 200 150 100 50, 4: 200 150 100 50, 4: 200 150 100 50' specifies four shifts (5 epochs) for each rate, all shifting at the same time (note that the number and times can also be different for each rate, although not necessary). Alternatively, simply providing only one series, e.g., 'prset samplestrat=random 4: 200 150 100 50' allows fossil-sampling rate to shift while keeping the speciation and extinction rates constant. An implementation note for diversified sampling in the FBD model: there is no fossil and no rate shift allowed between x_cut (the cut-off time for sampling extant taxa) and the present (Zhang et al. 2016). \n\n\tprset samplestrat = random\n\tprset samplestrat = diversity\n\tprset samplestrat = cluster\n\tprset samplestrat = fossiltip\n\tprset samplestrat = random    <s>: ... <t_i> ...\n\tprset samplestrat = diversity <s>: ... <t_i> ..."
    },
    popsizepr: {
        description: "This parameter sets the prior on the population size component of the coalescent parameter. The options are: \n\n\tprset popsizepr = uniform(<number>,<number>)\n\tprset popsizepr = lognormal(<number>,<number>)\n\tprset popsizepr = normal(<number>,<number>)\n\tprset popsizepr = gamma(<number>,<number>)\n\tprset popsizepr = fixed(<number>)\n\nThis parameter is only relevant if the coalescence process is selected as the prior on branch lengths. Note that the setting of 'ploidy' in 'lset' is important for how this parameter is interpreted."
    },
    popvarpr: {
        description: "In a gene tree - species tree model, this parameter determines whether the population size is the same for the entire species tree ('popvarpr = equal', the default), or varies across branches of the species tree ('popvarpr=variable')."
    },
    nodeagepr: {
        description: "This parameter specifies the assumptions concerning the age of the terminal and interior nodes in the tree. The default model ('nodeagepr = unconstrained') assumes that all terminal nodes are of the same age while the age of interior nodes is unconstrained. The alternative ('nodeagepr = calibrated') option derives a prior probability distribution on terminal and interior node ages from the calibration settings (see the 'calibrate' command). The 'nodeagepr' parameter is only relevant for clock trees."
    },
    clockratepr: {
        description: "This parameter specifies the prior assumptions concerning the base substitution rate of the tree, measured in expected number of substitutions per site per time unit. The default setting is 'Fixed(1.0)', which effectively means that the time unit is the number of expected substitutions per site. If you do not have any age calibrations in the tree, you can still calibrate the tree using 'Clockratepr'. For instance, if you know that your sequence data evolve at a rate of 0.20 substitutions per million years, you might calibrate the tree by fixing the substitution rate to 0.20 using\n\n\tprset clockratepr = fixed(0.20)\n\nafter which the tree will be calibrated using millions of years as the unit. \n\nYou can also assign a prior probability distribution to the substitution rate, accommodating the uncertainty of it. When you calibrate the nodes, you should properly set this prior to match the time unit of the calibrations. You can choose among normal, lognormal, exponential and gamma distributions for this purpose. For instance, to assign a normal distribution truncated at 0, so that only positive values are allowed, and with mean 0.20 and standard deviation of 0.02, you would use\n\n\tprset clockratepr = normal(0.20,0.02)\n\nThe lognormal distribution is parameterized in terms of the mean and standard deviation on the log scale (natural logs). For instance, \n\n\tprset clockratepr = lognormal(-1.61,0.10)\n\nspecifies a lognormal distribution with a mean of log values of -1.61 and a standard deviation of log values of 0.10. In such a case, the mean value of the lognormal distribution is equal to e^(-1.61 + 0.10^2/2) = 0.20. \n\nNote that the 'Clockratepr' parameter has no effect on non-clock trees."
    },
    clockvarpr: {
        description: "This parameter allows you to specify the type of clock you are assuming. The default is 'strict', which corresponds to the standard clock model where the evolutionary rate is constant throughout the tree. For relaxed clock models, you can use 'cpp', 'tk02', 'wn', 'igr', or 'iln'. 'cpp' invokes a relaxed clock model where the rate evolves according to a Compound Poisson Process (CPP) (Huelsenbeck et al., 2000). \n'tk02' invokes the geometric Brownian Motion model described by Thorne and Kishino (2002). [autocorrelated lognormal] 'wn' invokes the white noise model (LePage et al., 2007) where each branch has an independent rate drawn from a gamma distribution with variance proportional to the branch length. 'igr' invokes the Independent Gamma Rate model. The difference from 'wn' is that these gamma distributions are i.i.d. Thus, the variances do not depend on the branch lengths. 'iln' invokes the Independent Lognormal model. It is similar to 'igr' but the rates are i.i.d. lognormal distributions. Each of the relaxed clock models has additional parameters with priors. For the CPP model, it is 'cppratepr' and 'cppmultdevpr'; for the TK02 model, it is 'tk02varpr'; for the WN model, it is 'wnvarpr'; for the IGR model, it is 'igrvarpr'; for the ILN model, it is 'ilnvarpr'. The 'clockvarpr' parameter is only relevant for clock trees."
    },
    cppratepr: {
        description: "This parameter allows you to specify a prior probability distribution on the rate of the Poisson process generating changes in the evolutionary rate in the CPP relaxed clock model. You can either fix the rate or associate it with an exponential prior using\n\n\tprset cppratepr = fixed(<number>)\n\tprset cppratepr = exponential(<number>)\n\nFor instance, if you fix the rate to 2, then on a branch with the length equal to one expressed in terms of average expected number of substitution per site, you expect to see, on average, two rate-modifying events. If you put an exponential(0.1) on the rate, you will be estimating the rate against a prior probability distribution where the expected rate is 10 (= 1/0.1)."
    },
    cppmultdevpr: {
        description: "This parameter allows you to specify the standard deviation of the log-normal distribution from which the rate multipliers of the CPP relaxed clock model are drawn. The standard deviation is given on the log scale. The default value of 1.0 thus corresponds to rate multipliers varying from 0.37 (1/e) to 2.7 (e) when they are +/- one standard deviation from the expected mean. The expected mean of the logarithm of the mulpliers is fixed to 0, ensuring that the expected mean rate is 1.0. You can change the default value by using\n\tprset cppmultdevpr = fixed(<number>)\n\nwhere <number> is the standard deviation on the log scale."
    },
    TK02varpr: {
        description: "This parameter allows you to specify the prior probability distribution for the variance of the rate multiplier in the Thorne-Kishino ('Brownian motion') relaxed clock model. Specifically, the parameter specifies the rate at which the variance increases with respect to the base rate of the clock. If you have a branch of a length corresponding to 0.4 expected changes per site according to the base rate of the clock, and the tk02var parameter has a value of 2.0, then the rate multiplier at the end of the branch will be drawn from a lognormal distribution with a variance of 0.4*2.0 (on the linear, not the logarithm scale). The mean is the same as the rate multiplier at the start of the branch (again on the linear scale). You can set the parameter to a fixed value, or specify that it is drawn from an exponential or uniform distribution:\n\n\tprset tk02varpr = fixed(<number>)\n\tprset tk02varpr = exponential(<number>)\n\tprset tk02varpr = uniform(<number>,<number>)"
    },
    WNvarpr: {
        description: "This parameter allows you to specify the prior distribution for the variance of the independent branch rate (white noise) relaxed clock model. Specifically, the parameter specifies the rate at which the variance increases with respect to the base rate of the clock. If you have a branch of a length corresponding to 0.4 expected changes per site according to the base rate of the clock, and the wnvar parameter has a value of 2.0 , then the effective branch length will be drawn from a gamma distribution with a variance of 0.4*2.0. You can set the parameter to a fixed value, or specify that it is drawn from an exponential or uniform distribution:\n\n\tprset wnvarpr = fixed(<number>)\n\tprset wnvarpr = exponential(<number>)\n\tprset wnvarpr = uniform(<number>,<number>)"
    },
    IGRvarpr: {
        description: "This parameter allows you to specify the prior distribution for the variance of the independent gamma rate (IGR) relaxed clock model. Specifically, the parameter specifies the rate at which the variance increases with respect to the base rate of the clock. The difference from the white noise (WN) model is that the variance is the same for all branch rates and does not depend on the branch length.  If igrvar parameter has a value of 0.8 , then the rate multiplier will be drawn from a gamma distribution with mean 1.0 and variance 0.8. You can set the parameter to a fixed value, or specify that it is drawn from an exponential or uniform distribution:\n\n\tprset igrvarpr = fixed(<number>)\n\tprset igrvarpr = exponential(<number>)\n\tprset igrvarpr = uniform(<number>,<number>)"
    },
    ILNvarpr: {
        description: "This parameter allows you to specify the prior distribution for the variance of the independent lognormal (ILN) relaxed clock model. It is similar with IGR but each rate multiplier has a lognormal instead of a gamma distribution. If ilnvar has a value of 0.8 , then the rate multiplier will be drawn from a lognormal distribution with mean 1.0 and variance 0.8. You can set the parameter to a fixed value, or specify that it is drawn from an exponential or uniform distribution: \n\n\tprset ilnvarpr = fixed(<number>)\n\tprset ilnvarpr = exponential(<number>)\n\tprset ilnvarpr = uniform(<number>,<number>)"
    },
    ratepr: {
        description: "This parameter allows you to specify the site specific rates model or any other model that allows different partitions to evolve at different rates. First, you must have defined a partition of the characters. For example, you may define a partition that divides the characters by codon position, if you have DNA data. You can also divide your data using a partition that separates different genes from each other. The next step is to make the desired partition the active one using the set command. For example, if your partition is called 'by_codon', then you make that the active partition using 'set partition=by_codon'. Now that you have defined and activated a partition, you can specify the rate multipliers for the various partitions. The options are:\n\n\tprset ratepr = fixed\n\tprset ratepr = variable\n\tprset ratepr = dirichlet(<number>,<number>,...,<number>)\n\nIf you specify 'fixed', then the rate multiplier for that partition is set to 1 (i.e., the rate is fixed to the average rate across partitions). On the other hand, if you specify 'variable', then the rate is allowed to vary across partitions subject to the constraint that the average rate of substitution across the partitions is 1. You must specify a variable rate prior for at least two partitions, otherwise the option is not activated when calculating likelihoods. The variable option automatically associates the partition rates with a dirichlet(1,...,1) prior. The dirichlet option is an alternative way of setting a partition rate to be variable, and also gives accurate control of the shape of the prior. The parameters of the Dirichlet are listed in the order of the partitions that the ratepr is applied to. For instance, 'prset applyto=(1,3,4) ratepr = dirichlet(10,40,15)' would set the Dirichlet parameter 10 to partition 1, 40 to partition 3, and 15 to partition 4. The Dirichlet distribution is applied to the weighted rates; that is, it weights the partition rates according to the number of included characters in each partition."
    },
    generatepr: {
        description: "This parameter is similar to 'Ratepr' but applies to gene trees in the multispecies coalescent, whereas 'Ratepr' applies to partitions within genes."
    }
}

export const mcmcHelpMenu = {
    ngen: {
        description: "This option sets the number of cycles for the MCMC algorithm. This should be a big number as you want the chain to first reach stationarity, and then remain there for enough time to take lots of samples."
    },
    nruns: {
        description: "How many independent analyses are started simultaneously."
    },
    nchains: {
        description: "How many chains are run for each analysis for the MCMCMC variant. The default is 4: 1 cold chain and 3 heated chains. If Nchains is set to 1, MrBayes will use regular MCMC sampling, without heating."
    },
    temp: {
        description: "The temperature parameter for heating the chains. The higher the temperature, the more likely the heated chains are to move between isolated peaks in the posterior distribution. However, excessive heating may lead to very low acceptance rates for swaps between different chains. Before changing the default setting, however, note that the acceptance rates of swaps tend to fluctuate during the burn-in phase of the run."
    },
    reweight: {
        description: "Here, you specify three numbers, that respectively represent the percentage of characters to decrease in weight, the percentage of characters to increase in weight, and the increment. An increase/decrease in weight is achieved by replicating/removing a character in the matrix. This is only done to non-cold chains. The format for this parameter is 'reweight=(<number>,<number>)' or 'reweight=(<number>,<number>,<number>)'."
    },
    swapfreq: {
        description: "This specifies how often swaps of states between chains are attempted. You must be running at least two chains for this option to be relevant. The default is Swapfreq=1, resulting in Nswaps (see below) swaps being tried each generation of the run. If Swapfreq is set to 10, then Nswaps swaps will be tried every tenth generation of the run. "
    },
    nswaps: {
        description: "The number of swaps tried for each swapping generation of the chain (see also Swapfreq)."
    },
    samplefreq: {
        description: "This specifies how often the Markov chain is sampled. You can sample the chain every cycle, but this results in very large output files. Thinning the chain is a way of making these files smaller and making the samples more independent."
    },
    printfreq: {
        description: "This specifies how often information about the chain is printed to the screen."
    },
    printall: {
        description: "If set to NO, only cold chains in a MCMC analysis are printed to screen. If set to YES, both cold and heated chains will be output. This setting only affects the printing to screen, it does not change the way values are written to file."
    },
    printmax: {
        description: "The maximum number of chains to print to screen."
    },
    mcmcdiagn: {
        description: "Determines whether acceptance ratios of moves and swaps will be printed to file. The file will be named similarly to the '.p' and '.t' files, but will have the ending '.mcmc'. If more than one independent analysis is run simultaneously (see Nruns below), convergence diagnostics for tree topology will also be printed to this file. The convergence diagnostic used is the average standard deviation in partition frequency values across independent analyses. The Burnin setting (see below) determines how many samples will be discarded as burnin before calculating the partition frequencies. The Minpartfreq setting (see below) determines the minimum partition frequency required for a partition to be included in the calculation. As the independent analyses approach stationarity (converge), the value of the diagnostic is expected to approach zero."
    },
    diagnfreq: {
        description: "The number of generations between the calculation of MCMC diagnostics (see Mcmcdiagn above)."
    },
    diagnstat: {
        description: "The statistic to use for run-time convergence diagnostics. Choices are 'Avgstddev' for average standard deviation of split frequencies and 'Maxstddev' for maximum standard deviation of split frequencies."
    },
    savetrees: {
        description: "If you are using a relative burnin for run-time convergence diagnostics, tree samples need to be deleted from split frequency counters as the cut-off point for the burnin moves during the run. If 'Savetrees' is set to 'No', tree samples to be discarded are read back in from file. If 'Savetrees' is set to 'Yes', the tree samples to be removed will be stored in the internal memory instead. This can use up a lot of memory in large analyses."
    },
    minpartfreq: {
        description: "The minimum frequency required for a partition to be included in the calculation of the topology convergence diagnostic. The partition is included if the minimum frequency is reached in at least one of the independent tree samples that are compared."
    },
    allchains: {
        description: "If this option is set to YES, acceptance ratios for moves are recorded for all chains, cold or heated. By default, only the acceptance ratios for the cold chain are recorded."
    },
    allcomps: {
        description: "If this option is set to YES, topological convergence diagnostics are calculated over all pairwise comparisons of runs. If it is set to NO, only the overall value is reported."
    },
    relburnin: {
        description: "If this option is set to YES, then a proportion of the sampled values will be discarded as burnin when calculating the convergence diagnostic. The proportion to be discarded is set with Burninfrac (see below). When the Relburnin option is set to NO, then a specific number of samples will be discarded instead. This number is set by Burnin (see below)."
    },
    burnin: {
        description: "Determines the number of samples (not generations) that will be discarded when convergence diagnostics are calculated. The value of this option is only relevant when Relburnin is set to NO."
    },
    burninfrac: {
        description: "Determines the fraction of samples that will be discarded when convergence diagnostics are calculated. The value of this option is only relevant when Relburnin is set to YES. Example: A value for this option of 0.25 means that 25% of the samples will be discarded."
    },
    stoprule: {
        description: "If this option is set to NO, then the chain is run the number of generations determined by Ngen. If it is set to YES, and topological convergence diagnostics are calculated (Mcmcdiagn is set to YES), then the chain will be stopped before the predetermined number of generations if the convergence diagnostic falls below the stop value."
    },
    stopval: {
        description: "The critical value for the topological convergence diagnostic. Only used when Stoprule and Mcmcdiagn are set to yes, and more than one analysis is run simultaneously (Nruns > 1)."
    },
    checkpoint: {
        description: "If this parameter is set to 'Yes', all the current parameter values of all chains will be printed to a check-pointing file every 'Checkfreq' generation of the analysis. The file will be named <Filename>.ckp and allows you to restart the analysis from the last check point. This can be handy if you are running a long analysis and want to extend it, or if there is a risk that a long analysis will be inadvertently interrupted by hardware failure or other factors that are out of your control."
    },
    checkfreq: {
        description: "The number of generations between check-pointing. See the 'Checkpoint' parameter above for more information."
    },
    filename: {
        description: "The name of the files that will be generated. Two files are generated: '<Filename>.t' and '<Filename>.p'. The .t file contains the trees whereas the .p file contains the sampled values of the parameters."
    },
    startparams: {
        description: "The starting values for the model parameters are set to arbitrary or random values when the parameters are created. These starting values can be altered using the 'Startvals' command. The 'Startparams=reset' option allows you to reset the starting values to the default at the start of the analysis, overriding any previous user-defined starting values. Under the default option, 'current', the chains will use the current starting values. "
    },
    starttree: {
        description: "The starting tree(s) for the chain can either be randomly selected or user-defined. It might be a good idea to start from randomly chosen trees; convergence seems likely if independently run chains, each of which started from different random trees, converge to the same answer. If you want the chain to start from user-defined trees instead, you first need to read in your tree(s) from a Nexus file with a 'trees' block, and then you need to set the starting tree(s) using the 'Startvals' command. Finally, you need to make sure that 'Starttree' is set to 'current'. If you do not set the starting tree(s), the chains will start with random trees. Setting 'Starttree' to 'random' causes new starting trees to be drawn randomly at the start of the run, overwriting any previous user-defined starting trees."
    },
    nperts: {
        description: "This is the number of random perturbations to apply to the user starting tree. This allows you to have something between completely random and user-defined trees start the chain."
    },
    data: {
        description: "When Data is set to NO, the chain is run without data. This should be used only for examining induced priors. DO NOT SET 'DATA' TO 'NO' UNLESS YOU KNOW WHAT YOU ARE DOING!"
    },
    ordertaxa: {
        description: "Determines whether taxa should be ordered before trees are printed to file. If set to 'Yes', terminals in the sampled trees will be reordered to match the order of the taxa in the data matrix as closely as possible. By default, trees will be printed without reordering of taxa."
    },
    append: {
        description: "Set this to 'Yes' to append the results of the current run to a previous run. MrBayes will first read in the results of the previous run (number of generations and sampled splits) and will then continue that run where you left it off. Make sure that the output file names used in the previous run are the same as those in the current run."
    },
    autotune: {
        description: "Set this to 'Yes' to autotune the proposals that change substitution model parameters. When set to 'No', the tuning parameters are fixed to their starting values. Note that the autotuning occurs independently for each chain. The target acceptance rate for each move can be changed using the 'Propset' command."
    },
    tunefreq: {
        description: "When a proposal has been tried 'Tunefreq' times, its tuning parameter is adjusted to reach the target acceptance rate if 'Autotune' is set to 'Yes'."
    },
}
